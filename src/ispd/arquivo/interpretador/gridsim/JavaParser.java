package ispd.arquivo.interpretador.gridsim;

/* Generated By:JavaCC: Do not edit this line. JavaParser.java */
import java.io.*;
import java.util.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class JavaParser implements JavaParserConstants {
        private List <ResourceChar> ResourceChars = new ArrayList<ResourceChar>();
        private List <String> TableOfNames = new ArrayList<String>();
        private List <String> TableOfValues = new ArrayList<String>();
        private List <String> Array = new ArrayList<String>();
        private ResourceChar temp = null;
        private String nameVariable;
        private String valueVariable;
        private String nameV;
        private String valueV;
        private boolean type = false;
        private boolean primitiveType = false;
        private boolean primitiveValue = false;
        private boolean arrayStatus = false;
        private boolean posArray = false;
        private boolean increment = false;
        private boolean increment_update = false;
        private boolean update_variable = false;
        private boolean non_primitiveType;

        public void setType(boolean enter)
        {
                this.type = enter;
        }
        public void setPrimitiveType(boolean enter)
        {
                this.primitiveType = enter;
        }
        public void setPrimitiveValue(boolean enter)
        {
                this.primitiveValue = enter;
        }
        public void setNameVariable(String name)
        {
                this.nameVariable = name;
                System.out.print(this.nameVariable);
                System.out.println();
        }
        public void setNameV(String name)
        {
                this.nameV = name;
        }
        public void setValueVariable(String value)
        {
                this.valueVariable = value;
                System.out.println(this.valueVariable);
                System.out.println();
        }
        public void setValueV(String value)
        {
                this.valueV = value;
        }
        public void setArrayStatus(boolean enter)
        {
                this.arrayStatus = enter;
        }
        public void setPosArray(boolean enter)
        {
                this.posArray = enter;
        }
        public void setIncrement(boolean enter)
        {
                this.increment = enter;
        }
        public void setIncrementUpdate(boolean enter)
        {
                this.increment_update = enter;
        }
        public void setUpdate_Variable(boolean enter)
        {
                this.update_variable = enter;
        }
        public void setNon_PrimitiveType(boolean enter)
        {
                this.non_primitiveType = enter;
        }



        public boolean getPrimitiveType()
        {
                return primitiveType;
        }
        public boolean getPrimitiveValue()
        {
                return primitiveValue;
        }
        public String getNameVariable()
        {
                return nameVariable;
        }
        public String getNameV()
        {
                return nameV;
        }
        public String getValueVariable()
        {
                return valueVariable;
        }
        public String getValueV()
        {
                return valueV;
        }
        public boolean getArrayStatus()
        {
                return arrayStatus;
        }
        public boolean getPosArray()
        {
                return posArray;
        }
        public boolean getType()
        {
                return type;
        }
        public boolean getIncrement()
        {
                return increment;
        }
        public boolean getIncrementUpdate()
        {
                return increment_update;
        }
        public boolean getUpdate_Variable()
        {
                return update_variable;
        }
        public boolean getnon_PrimitiveType()
        {
                return non_primitiveType;
        }


        public void inserir(String variavel, String valor){
                int posicao = TableOfNames.indexOf(variavel);
                if(posicao == -1){
                        TableOfNames.add(variavel);
                        TableOfValues.add(valor);
                        posicao = TableOfNames.indexOf(variavel);
                }
                else
                        TableOfValues.set(posicao, valor);
        }
        public String retornar(String variavel, String valor){
                int posicao = TableOfNames.indexOf(variavel);
                if(posicao == -1)
                        return variavel;
                else
                {
                        if(TableOfValues.get(posicao) == "-")
                        {
                                int pos = Array.indexOf(valor);
                                if(posicao == -1)
                                        return valor;
                                else
                                        return TableOfValues.get(pos);
                        }
                        else
                                return TableOfValues.get(posicao);
                }
        }
        public void insertArray(String variavel, String valor){
                if(getPosArray() == false)
                {
                        int posicao = TableOfNames.indexOf(variavel);
                        String pos = String.valueOf(posicao);
                        Array.add(pos);
                        System.out.println(pos);
                }
                else
                {
                        Array.add(valor);
                }
        }
        public void update_value(String variavel, String sinal, String incremento, String var_aux){
                int posicao = TableOfNames.indexOf(variavel);
                if(sinal.equals("++") || sinal.equals("--")){
                        if(sinal.equals("++"))
                        {
                                String valor = TableOfValues.get(posicao);
                                int value = Integer.parseInt(valor);
                                value++;
                                valor = String.valueOf(value);
                                System.out.println("valor: " + value);
                                TableOfValues.set(posicao, valor);
                        }
                        if(sinal.equals("--"))
                        {
                                String valor = TableOfValues.get(posicao);
                                int value = Integer.parseInt(valor);
                                value--;
                                valor = String.valueOf(value);
                                System.out.println("valor: " + value);
                                TableOfValues.set(posicao, valor);
                        }
                }
                else{
                        if(sinal.equals("+"))
                        {
                                String valor = TableOfValues.get(posicao);
                                int value = Integer.parseInt(valor);
                                int increment = Integer.parseInt(incremento);
                                value = value + increment;
                                valor = String.valueOf(value);
                                System.out.println("valor: " + value);
                                TableOfValues.set(posicao, valor);
                        }
                        if(sinal.equals("-"))
                        {
                                String valor = TableOfValues.get(posicao);
                                int value = Integer.parseInt(valor);
                                int increment = Integer.parseInt(incremento);
                                value = value - increment;
                                valor = String.valueOf(value);
                                System.out.println("valor: " + value);
                                TableOfValues.set(posicao, valor);
                        }
                        if(sinal.equals("*"))
                        {
                                String valor = TableOfValues.get(posicao);
                                int value = Integer.parseInt(valor);
                                int increment = Integer.parseInt(incremento);
                                value = value * increment;
                                valor = String.valueOf(value);
                                System.out.println("valor: " + value);
                                TableOfValues.set(posicao, valor);
                        }
                        if(sinal.equals("/"))
                        {
                                String valor = TableOfValues.get(posicao);
                                double value = Double.parseDouble(valor);
                                double increment = Integer.parseInt(incremento);
                                double val = value/increment;
                                valor = String.valueOf(val);
                                System.out.println("valor: " + val);
                                TableOfValues.set(posicao, valor);
                        }
                }
        }
        public void analise(Token t){
                String parameter;
                if(getNewInstance() && getResourceCharacteristics())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setArch(parameter);
                                        break;
                                case 1: parameter = retornar(t.image, "");
                                        temp.setOS(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setMlist(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getNewInstance() && getGridResource())
                {
                        switch(temp.getCont())
                        {
                                case 1: parameter = retornar(t.image, "");
                                        temp.setBaud_rate(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setSeed(parameter);
                                        break;
                                case 3: parameter = retornar(t.image, "");
                                        temp.setResConfig(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getNewInstance() && getGridlet())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setId(parameter);
                                        break;
                                case 1: parameter = retornar(t.image, "");
                                        temp.setLength(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setFile_size(parameter);
                                        break;
                                case 3: parameter = retornar(t.image, "");
                                        temp.setOutput_size(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getNewInstance() && getNewGridResource())
                {
                        switch(temp.getCont())
                        {
                                case 1: parameter = retornar(t.image, "");
                                        temp.setBaud_rate(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setResConfig(parameter);
                                        break;
                                case 4: System.out.println(t.image);//verificar aqui
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getNewInstance() && getNewPolicy())
                {
                        switch(temp.getCont())
                        {
                                case 1: parameter = retornar(t.image, "");
                                        temp.setPOLICY(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getNewInstance() && getRandom())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setSeed(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getmList() && getadd() && getMachine())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setId(parameter);
                                        break;
                                case 1: parameter = retornar(t.image, "");
                                        temp.setPeRating(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setMipsRating(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        if(temp.getCont() == 3)
                                temp.setCont(0);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                //if(getNewInstance() && getExample())
                //{	
                        //System.out.println(t.image);
                        //System.out.println();
                        //setvazio(false);//variable used to check if the parameters are empty
                //}
                if(getlist() && getadd())
                {
                        System.out.println(t.image);
                        System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getuserList() && getadd())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setUserID(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        if(temp.getCont() == 1)
                                temp.setCont(0);
                        //System.out.println(t.image);
                        //System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getGridSimStandardPE() && getRating())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setPeRating(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        if(temp.getCont() == 1)
                                temp.setCont(0);
                        //System.out.println(t.image);
                        //System.out.println(); 	 
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getGridSimRandom() && getreal())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setFile_size(parameter);
                                        break;
                                case 1: parameter = retornar(t.image, "");
                                        temp.setMin_range(parameter);
                                        break;
                                case 2: parameter = retornar(t.image, "");
                                        temp.setMax_range(parameter);
                                        break;
                                case 3: parameter = retornar(t.image, "");
                                        temp.setInterval(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        if(temp.getCont() == 4)
                                temp.setCont(0);
                        //if(t.image.equals("random"))
                        //{
                        //	System.out.print(t.image);
                        //}
                        //else
                        //{
                        //	System.out.println(t.image);				
                        //	System.out.println();
                        //}
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getgridlet() && getuser())
                {
                        System.out.println(t.image);
                        System.out.println();
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(gettoMIs() && getGridSimStandardPE())
                {
                        switch(temp.getCont())
                        {
                                case 0: parameter = retornar(t.image, "");
                                        temp.setRandom(parameter);
                                        break;
                                default:
                                        break;
                        }
                        temp.setCont(temp.getCont() + 1);
                        if(temp.getCont() == 1)
                                temp.setCont(0);
                        //System.out.print(t.image);
                        setvazio(false);//variable used to check if the parameters are empty
                }
                if(getast())
                {
                        System.out.println(t.image);
                        System.out.println();
                        setast(false);//variable used to check if the parameters are empty
                }
        }

    public void writefile() {
        System.out.println("Deveria escrever modelo aqui :P");
    }

        public class ResourceChar
        {
                private String arch;
                private String os;
                private String mList;
                private String policy;
                private String name;
                private String baud_rate;
                private String seed;
                private String resConfig;
                private String id;
                private String length;
                private String file_size;
                private String output_size;
                private String min_range;
                private String max_range;
                private String entityName_;
                private String resourceID;
                private String userID;
                private String total_resource;
                private String totalMachine;
                private String totalPE;
                private String peRating;
                private String mipsRating;
                private String totalUser;
                private String totalGridlet;
                private String gridletLength;
                private String bandwidth;
                private String delay;
                private String interval;
                private String random;
                private int cont = 0;
                public ResourceChar()
                {
                        arch = "";
                        os = "";
                        mList = "";
                        policy = "";
                        name = "";
                        baud_rate = "0.0";
                        seed = "0.0";
                        resConfig = "";
                        id = "";
                        length = "0.0";
                        file_size = "0.0";
                        output_size = "0.0";
                        min_range = "0.0";
                        max_range = "0.0";
                        entityName_ = "";
                        resourceID = "";
                        userID = "0.0";
                        total_resource = "0.0";
                        totalMachine = "0.0";
                        totalPE = "0.0";
                        peRating = "0.0";
                        totalUser = "0.0";
                        totalGridlet = "0.0";
                        gridletLength = "0.0";
                        bandwidth = "0.0";
                        delay = "0.0";
                        random = "0.0";
                        nameVariable = "";
                        valueVariable = "";
                }
                public void setArch(String arch)
                {
                        this.arch = arch;
                        System.out.println(this.arch);
                        System.out.println();
                }
                public void setOS(String os)
                {
                        this.os = os;
                        System.out.println(this.os);
                        System.out.println();
                }
                public void setMlist(String mList)
                {
                        this.mList = mList;
                        System.out.println(this.mList);
                        System.out.println();
                }
                public void setPOLICY(String policy)
                {
                        this.policy = policy;
                        System.out.println(this.policy);
                        System.out.println();
                }
                public void setName(String name)
                {
                        this.name = name;
                        System.out.println(this.name);
                        System.out.println();
                }
                public void setBaud_rate(String baud_rate)
                {
                        this.baud_rate = baud_rate;
                        System.out.println(this.baud_rate);
                        System.out.println();
                }
                public void setSeed(String seed)
                {
                        this.seed = seed;
                        System.out.println(this.seed);
                        System.out.println();
                }
                public void setResConfig(String resConfig)
                {
                        this.resConfig = resConfig;
                        System.out.println(this.resConfig);
                        System.out.println();
                }
                public void setId(String id)
                {
                        this.id = id;
                        System.out.println(this.id);
                        System.out.println();
                }
                public void setLength(String length)
                {
                        this.length = length;
                        System.out.println(this.length);
                        System.out.println();
                }
                public void setFile_size(String file_size)
                {
                        this.file_size = file_size;
                        System.out.println(this.file_size);
                        System.out.println();
                }
                public void setOutput_size(String output_size)
                {
                        this.output_size = output_size;
                        System.out.println(this.output_size);
                        System.out.println();
                }
                public void setMin_range(String min_range)
                {
                        this.min_range = min_range;
                        System.out.println(this.min_range);
                        System.out.println();
                }
                public void setMax_range(String max_range)
                {
                        this.max_range = max_range;
                        System.out.println(this.max_range);
                        System.out.println();
                }
                public void setEntityName(String entityName_)
                {
                        this.entityName_ = entityName_;
                        System.out.println(this.entityName_);
                        System.out.println();
                }
                public void setResourceID(String resourceID)
                {
                        this.resourceID = resourceID;
                        System.out.println(this.resourceID);
                        System.out.println();
                }
                public void setUserID(String userID)
                {
                        this.userID = userID;
                        System.out.println(this.userID);
                        System.out.println();
                }
                public void setTotal_resource(String Total_resource)
                {
                        this.total_resource = total_resource;
                        System.out.println(this.total_resource);
                        System.out.println();
                }
                public void setTotalMachine(String totalMachine)
                {
                        this.totalMachine = totalMachine;
                        System.out.println(this.totalMachine);
                        System.out.println();
                }
                public void setTotalPE(String totalPE)
                {
                        this.totalPE = totalPE;
                        System.out.println(this.totalPE);
                        System.out.println();
                }
                public void setPeRating(String peRating)
                {
                        this.peRating = peRating;
                        System.out.println(this.peRating);
                        System.out.println();
                }
                public void setTotalUser(String totalUser)
                {
                        this.totalUser = totalUser;
                        System.out.println(this.totalUser);
                        System.out.println();
                }
                public void setTotalGridlet(String totalGridlet)
                {
                        this.totalGridlet = totalGridlet;
                        System.out.println(this.totalGridlet);
                        System.out.println();
                }
                public void setGridletLength(String gridletLength)
                {
                        this.gridletLength = gridletLength;
                        System.out.println(this.gridletLength);
                        System.out.println();
                }
                public void setBandwidth(String bandwidth)
                {
                        this.bandwidth = bandwidth;
                        System.out.println(this.totalPE);
                        System.out.println();
                }
                public void setDelay(String delay)
                {
                        this.delay = delay;
                        System.out.println(this.delay);
                        System.out.println();
                }
                public void setCont(int cont)
                {
                        this.cont = cont;
                }
                public void setMipsRating(String mipsRating)
                {
                        this.mipsRating = mipsRating;
                        System.out.println(this.mipsRating);
                        System.out.println();
                }
                public void setInterval(String interval)
                {
                        this.interval = interval;
                        System.out.println(this.interval);
                        System.out.println();
                }
                public void setRandom(String random)
                {
                        this.random = random;
                        System.out.println(this.random);
                        System.out.println();
                }


                public String getArch()
                {
                        return arch;
                }
                public String getOS()
                {
                        return os;
                }
                public String getMLIST()
                {
                        return mList;
                }
                public String getPOLICY()
                {
                        return policy;
                }
                public String getName()
                {
                        return name;
                }
                public String getBaud_rate()
                {
                        return baud_rate;
                }
                public String getSeed()
                {
                        return seed;
                }
                public String getResConfig()
                {
                        return resConfig;
                }
                public String getId()
                {
                        return id;
                }
                public String getLenght()
                {
                        return length;
                }
                public String getFile_size()
                {
                        return file_size;
                }
                public String getOutput_size()
                {
                        return output_size;
                }
                public String getMin_range()
                {
                        return min_range;
                }
                public String getMax_range()
                {
                        return max_range;
                }
                public String getEntityName()
                {
                        return entityName_;
                }
                public String getResourceID()
                {
                        return resourceID;
                }
                public String getUserID()
                {
                        return userID;
                }
                public String getTotal_resource()
                {
                        return total_resource;
                }
                public String getTotalMachine()
                {
                        return totalMachine;
                }
                public String getTotalPE()
                {
                        return totalPE;
                }
                public String getPeRating()
                {
                        return peRating;
                }
                public String getTotalUser()
                {
                        return totalUser;
                }
                public String getTotalGridlet()
                {
                        return totalGridlet;
                }
                public String getGridletLength()
                {
                        return gridletLength;
                }
                public String getBandwidth()
                {
                        return bandwidth;
                }
                public String getDelay()
                {
                        return delay;
                }
                public int getCont()
                {
                        return cont;
                }
                public String getMipsRating()
                {
                        return mipsRating;
                }
                public String getInterval()
                {
                        return interval;
                }
                public String getRandom()
                {
                        return random;
                }

        }
/**
* Class to hold modifiers.
*/
        static public final class ModifierSet
        {
                /* Definitions of the bits in the modifiers field.  */
                public static final int PUBLIC = 0x0001;
                public static final int PROTECTED = 0x0002;
                public static final int PRIVATE = 0x0004;
                public static final int ABSTRACT = 0x0008;
                public static final int STATIC = 0x0010;
                public static final int FINAL = 0x0020;
                public static final int SYNCHRONIZED = 0x0040;
                public static final int NATIVE = 0x0080;
                public static final int TRANSIENT = 0x0100;
                public static final int VOLATILE = 0x0200;
                public static final int STRICTFP = 0x1000;

                /** A set of accessors that indicate whether the specified modifier
     		    is in the set. */

                public boolean isPublic(int modifiers)
                {
                        return (modifiers & PUBLIC) != 0;
                }

                public boolean isProtected(int modifiers)
                {
                        return (modifiers & PROTECTED) != 0;
                }

                public boolean isPrivate(int modifiers)
                {
                        return (modifiers & PRIVATE) != 0;
                }

                public boolean isStatic(int modifiers)
                {
                        return (modifiers & STATIC) != 0;
                }

                public boolean isAbstract(int modifiers)
                {
                        return (modifiers & ABSTRACT) != 0;
                }

                public boolean isFinal(int modifiers)
                {
                        return (modifiers & FINAL) != 0;
                }

                public boolean isNative(int modifiers)
                {
                        return (modifiers & NATIVE) != 0;
                }

                public boolean isStrictfp(int modifiers)
                {
                        return (modifiers & STRICTFP) != 0;
                }

                public boolean isSynchronized(int modifiers)
                {
                        return (modifiers & SYNCHRONIZED) != 0;
                }

                public boolean isTransient(int modifiers)
                {
                        return (modifiers & TRANSIENT) != 0;
                }

                public boolean isVolatile(int modifiers)
                {
                        return (modifiers & VOLATILE) != 0;
                }

                /**
      		* Removes the given modifier.
      		*/
                static int removeModifier(int modifiers, int mod)
                {
                        return modifiers & ~mod;
                }
        }

        public JavaParser(String fileName)
        {
                this(System.in);
                try { ReInit(new FileInputStream(new File(fileName))); }
                catch(Exception e) { e.printStackTrace(); }
        }

        //semantic analysis variables
        boolean NewInstance = false;
        boolean ResourceCharacteristics = false;
        boolean GridResource = false;
        boolean Gridlet = false;
        boolean NewGridResource = false;
        boolean NewPolicy = false;
        boolean mList = false;
        boolean add = false;
        boolean Machine = false;
        boolean list = false;
        boolean userList = false;
        boolean GridSimStandardPE = false;
        boolean Rating = false;
        boolean GridSimRandom = false;
        boolean real = false;
        boolean Random = false;
        boolean vazio = false;
        boolean Example = false;
        boolean gridlet = false;
        boolean user = false;
        boolean toMIs = false;
        boolean ast = false;
        boolean statusfor = false;


        //setters e getters for the semantic analysis variables
        public void setNewInstance(boolean entrada){
                NewInstance = entrada;
                if(temp != null)
                        ResourceChars.add(temp);
                temp = new ResourceChar();
        }
        public boolean getNewInstance(){
                return NewInstance;
        }

        public void setResourceCharacteristics(boolean entrada){
                ResourceCharacteristics = entrada;
        }
        public boolean getResourceCharacteristics(){
                return ResourceCharacteristics;
        }

        public void setGridResource(boolean entrada){
                GridResource = entrada;
        }
        public boolean getGridResource(){
                return GridResource;
        }

        public void setGridlet(boolean entrada){
                Gridlet = entrada;
        }
        public boolean getGridlet(){
                return Gridlet;
        }

        public void setNewGridResource(boolean entrada){
                NewGridResource = entrada;
        }
        public boolean getNewGridResource(){
                return NewGridResource;
        }

        public void setNewPolicy(boolean entrada){
                NewPolicy = entrada;
        }
        public boolean getNewPolicy(){
                return NewPolicy;
        }

        public void setmList(boolean entrada){
                mList = entrada;
        }
        public boolean getmList(){
                return mList;
        }

        public void setadd(boolean entrada){
                add = entrada;
        }
        public boolean getadd(){
                return add;
        }

        public void setMachine(boolean entrada){
                Machine = entrada;
        }
        public boolean getMachine(){
                return Machine;
        }

        public void setlist(boolean entrada){
                list = entrada;
        }
        public boolean getlist(){
                return list;
        }

        public void setuserList(boolean entrada){
                userList = entrada;
        }
        public boolean getuserList(){
                return userList;
        }

        public void setGridSimStandardPE(boolean entrada){
                GridSimStandardPE = entrada;
        }
        public boolean getGridSimStandardPE(){
                return GridSimStandardPE;
        }

        public void setRating(boolean entrada){
                Rating = entrada;
        }
        public boolean getRating(){
                return Rating;
        }

        public void setGridSimRandom (boolean entrada){
                GridSimRandom = entrada;
        }
        public boolean getGridSimRandom(){
                return GridSimRandom;
        }

        public void setreal (boolean entrada){
                real = entrada;
        }
        public boolean getreal(){
                return real;
        }

        public void setRandom (boolean entrada){
                Random = entrada;
        }
        public boolean getRandom(){
                return Random;
        }

        public void setvazio(boolean entrada){
                vazio = entrada;
        }
        public boolean getvazio(){
                return vazio;
        }

        public void setExample(boolean entrada){
                Example = entrada;
        }
        public boolean getExample(){
                return Example;
        }

        public void setgridlet(boolean entrada){
                gridlet = entrada;
        }
        public boolean getgridlet(){
                return gridlet;
        }

        public void setuser(boolean entrada){
                user = entrada;
        }
        public boolean getuser(){
                return user;
        }

        public void settoMIs(boolean entrada){
                toMIs = entrada;
        }
        public boolean gettoMIs(){
                return toMIs;
        }

        public void setast(boolean entrada){
                ast = entrada;
        }
        public boolean getast(){
                return ast;
        }

        public void setFor(boolean entrada){
                statusfor = entrada;
        }
        public boolean getFor(){
                return statusfor;
        }

        public static void main(String args[]) {
                JavaParser parser;
                if (args.length == 0) {
                        System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
                        parser = new JavaParser(System.in);
                }
                else
                        if (args.length == 1){
                                System.out.println("Java Parser Version 1.1:  Reading from file " + args[0] + " . . .");
                                try{
                                        parser = new JavaParser(new java.io.FileInputStream(args[0]));
                                }
                                catch(java.io.FileNotFoundException e){
                                        System.out.println("Java Parser Version 1.1:  File " + args[0] + " not found.");
                                        return;
                                }
                        }
                        else{
                              System.out.println("Java Parser Version 1.1:  Usage is one of:");
                              System.out.println("         java JavaParser < inputfile");
                              System.out.println("OR");
                              System.out.println("         java JavaParser inputfile");
                              return;
                        }
                        try{
                                parser.CompilationUnit();
                                System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
                        }
                        catch(ParseException e){
                                System.out.println(e.getMessage());
                                System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
                }
        }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public void CompilationUnit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      PackageDeclaration();
      break;
    default:
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        break label_1;
      }
      ImportDeclaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case ENUM:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_2;
      }
      TypeDeclaration();
    }
    jj_consume_token(0);
  }

  final public void PackageDeclaration() throws ParseException {
    jj_consume_token(PACKAGE);
    Name();
    jj_consume_token(SEMICOLON);
  }

  final public void ImportDeclaration() throws ParseException {
    jj_consume_token(IMPORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    Name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public int Modifiers() throws ParseException {
        int modifiers = 0;
    label_3:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
                                   modifiers |= ModifierSet.PUBLIC;
        break;
      case STATIC:
        jj_consume_token(STATIC);
                                   modifiers |= ModifierSet.STATIC;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                                      modifiers |= ModifierSet.PROTECTED;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                                    modifiers |= ModifierSet.PRIVATE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
                                  modifiers |= ModifierSet.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                                     modifiers |= ModifierSet.ABSTRACT;
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
                                         modifiers |= ModifierSet.SYNCHRONIZED;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
                                   modifiers |= ModifierSet.NATIVE;
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
                                      modifiers |= ModifierSet.TRANSIENT;
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
                                     modifiers |= ModifierSet.VOLATILE;
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
                                     modifiers |= ModifierSet.STRICTFP;
        break;
      case AT:
        Annotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return modifiers;}
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {
        int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case ABSTRACT:
    case CLASS:
    case ENUM:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case AT:
      modifiers = Modifiers();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(modifiers);
        break;
      case ENUM:
        EnumDeclaration(modifiers);
        break;
      case AT:
        AnnotationTypeDeclaration(modifiers);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {
        boolean isInterface = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
                                  isInterface = true;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      ExtendsList(isInterface);
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(isInterface);
      break;
    default:
      ;
    }
    ClassOrInterfaceBody(isInterface);
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {
        boolean extendsMoreThanOne = false;
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_4;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceType();
                                       extendsMoreThanOne = true;
    }
                if (extendsMoreThanOne && !isInterface)
                        {if (true) throw new ParseException("A class cannot extend more than one other class");}
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {
    jj_consume_token(IMPLEMENTS);
    ClassOrInterfaceType();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_5;
      }
      jj_consume_token(COMMA);
      ClassOrInterfaceType();
    }
                if (isInterface)
                        {if (true) throw new ParseException("An interface cannot implement other interfaces");}
  }

  final public void EnumDeclaration(int modifiers) throws ParseException {
    jj_consume_token(ENUM);
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      ImplementsList(false);
      break;
    default:
      ;
    }
    EnumBody();
  }

  final public void EnumBody() throws ParseException {
    jj_consume_token(LBRACE);
    EnumConstant();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(COMMA);
      EnumConstant();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          break label_7;
        }
        ClassOrInterfaceBodyDeclaration(false);
      }
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

  final public void EnumConstant() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      Arguments();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ClassOrInterfaceBody(false);
      break;
    default:
      ;
    }
  }

  final public void TypeParameters() throws ParseException {
    jj_consume_token(LT);
    TypeParameter();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_8;
      }
      jj_consume_token(COMMA);
      TypeParameter();
    }
    jj_consume_token(GT);
  }

  final public void TypeParameter() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      TypeBound();
      break;
    default:
      ;
    }
  }

  final public void TypeBound() throws ParseException {
    jj_consume_token(EXTENDS);
    ClassOrInterfaceType();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_9;
      }
      jj_consume_token(BIT_AND);
      ClassOrInterfaceType();
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {
    jj_consume_token(LBRACE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case LT:
        ;
        break;
      default:
        break label_10;
      }
      ClassOrInterfaceBodyDeclaration(isInterface);
    }
    jj_consume_token(RBRACE);
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
        boolean isNestedInterface = false;
        int modifiers;
    if (jj_2_4(2)) {
      Initializer();
                if (isInterface)
                        {if (true) throw new ParseException("An interface cannot have initializers");}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
      case AT:
      case LT:
        modifiers = Modifiers();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        default:
          if (jj_2_2(2147483647)) {
            ConstructorDeclaration();
          } else if (jj_2_3(2147483647)) {
            FieldDeclaration(modifiers);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDENTIFIER:
            case LT:
              MethodDeclaration(modifiers);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {
    Type();
    VariableDeclarator();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_11;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
    jj_consume_token(SEMICOLON);
  }

  final public void VariableDeclarator() throws ParseException {
                if(getType())
                        setPrimitiveType(true);
                //if(getNon_PrimitiveType())
                //	setUpdate_Variable(true);

    VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      VariableInitializer();
      break;
    default:
      ;
    }
  }

  final public void VariableDeclaratorId() throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFIER);
                                if(getPrimitiveType()){
                                        setNameVariable(t.image);
                                //if(getUpdate_Variable()){
                                //	setNameVariable(t.image);
                                }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_12;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void VariableInitializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
                        if(getArrayStatus() == false){
                                inserir(getNameVariable(), getValueVariable());
                        }
                        else
                        {
                                setPrimitiveValue(true);
                                setPrimitiveType(true);
                                insertArray(getNameVariable(), getValueVariable());

                        }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ArrayInitializer() throws ParseException {
                setArrayStatus(true);
                inserir(getNameVariable(), "-");
                insertArray(getNameVariable(), "");
                setPosArray(true);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      VariableInitializer();
      label_13:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        VariableInitializer();
      }
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
                setArrayStatus(false);
                setPosArray(false);
                setPrimitiveValue(false);
                setPrimitiveType(false);
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    ResultType();
    MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MethodDeclarator() throws ParseException {
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        ;
        break;
      default:
        break label_14;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    }
  }

  final public void FormalParameters() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      FormalParameter();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_15;
        }
        jj_consume_token(COMMA);
        FormalParameter();
      }
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void FormalParameter() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      ;
    }
    Type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      break;
    default:
      ;
    }
    VariableDeclaratorId();
  }

  final public void ConstructorDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      TypeParameters();
      break;
    default:
      ;
    }
    jj_consume_token(IDENTIFIER);
    FormalParameters();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      jj_consume_token(THROWS);
      NameList();
      break;
    default:
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_6(2147483647)) {
      ExplicitConstructorInvocation();
    } else {
      ;
    }
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_16;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

  final public void ExplicitConstructorInvocation() throws ParseException {
    if (jj_2_8(2147483647)) {
      jj_consume_token(THIS);
      Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        if (jj_2_7(2)) {
          PrimaryExpression();
          jj_consume_token(DOT);
        } else {
          ;
        }
        jj_consume_token(SUPER);
        Arguments();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      jj_consume_token(STATIC);
      break;
    default:
      ;
    }
    Block();
  }

/*
 * Type, name and expression syntax follows.
 */
  final public void Type() throws ParseException {
    if (jj_2_9(2)) {
      ReferenceType();
                setType(false);
                //setNon_PrimitiveType(true);

    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        PrimitiveType();
                setType(true);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ReferenceType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      PrimitiveType();
      label_17:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        if (jj_2_10(2)) {
          ;
        } else {
          break label_17;
        }
      }
      break;
    case IDENTIFIER:
      ClassOrInterfaceType();
      label_18:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_18;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {
        Token t, k;
    t = jj_consume_token(IDENTIFIER);
                                if(getNewInstance())//check if the last word is a "new" and which is the next word for print the correct message and set the correct variable as true
                                {
                                        if(t.image.equals("ResourceCharacteristics"))
                                        {
                                                setResourceCharacteristics(true);
                                                System.out.println("Estanciando recursos:");
                                                setvazio(true);
                                        }
                                        if(t.image.equals("GridResource"))
                                        {
                                                setGridResource(true);
                                                System.out.println("Estanciando recursos do Grid:");
                                                setvazio(true);
                                        }
                                        if(t.image.equals("Gridlet"))
                                        {
                                                setGridlet(true);
                                                System.out.println("Estanciando pacote de tarefas do Grid:");
                                                setvazio(true);
                                        }
                                        if(t.image.equals("NewGridResource"))
                                        {
                                                setNewGridResource(true);
                                                System.out.println("Criar novo recurso do grid:");
                                                setvazio(true);
                                        }
                                        if(t.image.equals("NewPolicy"))
                                        {
                                                setNewPolicy(true);
                                                System.out.println("Criar nova politica de aloca\u00e7\u00e3o:");
                                                setvazio(true);
                                        }
                                        if(getmList() && getadd() && t.image.equals("Machine"))
                                        {
                                                setMachine(true);
                                                System.out.println("Adicionando m\u00e1quina \u00e0 Grade:");
                                                setvazio(true);
                                        }
                                        if(t.image.equals("Random"))
                                        {
                                                setRandom(true);
                                                System.out.println("Estanciando par\u00e2metros para o Grid:");
                                                setvazio(true);
                                        }
                                        if((t.image).length()>=7)//verifies which characters make up the string until the seventh element,  because the next characters are variable
                                        {
                                                if((t.image.substring(0,7)).equals("Example"))
                                                {
                                                        setExample(true);
                                                        System.out.println("Estanciando Exemplo:");
                                                        setvazio(true);
                                                }
                                        }
                                }
                                else//else only print messages on the screen
                                {
                                        if(t.image.equals("GridResource"))
                                                System.out.println("Recursos do Grid encontrados");
                                        if(t.image.equals("ResourceCharacteristics"))
                                                System.out.println("Caracter\u00edsticas de recursos encontradas");
                                        if(t.image.equals("Gridlet"))
                                                System.out.println("Pacote de tarefas do Grid encontrado");
                                        if(t.image.equals("NewGridResource"))
                                                System.out.println("Novo recurso do grid encontrado");
                                        if(t.image.equals("NewPolicy"))
                                                System.out.println("Nova politica de aloca\u00e7\u00e3o");
                                        if(t.image.equals("Machine"))
                                                System.out.println("Nova m\u00e1quina encontrada");
                                        if(t.image.equals("Random"))
                                                System.out.println("Par\u00e2metros rand\u00f4micos encontrados");
                                }
    if (jj_2_12(2)) {
      TypeArguments();
    } else {
      ;
    }
    label_19:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      if (jj_2_14(2)) {
        TypeArguments();
      } else {
        ;
      }
    }
  }

  final public void TypeArguments() throws ParseException {
    jj_consume_token(LT);
    TypeArgument();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_20;
      }
      jj_consume_token(COMMA);
      TypeArgument();
    }
    jj_consume_token(GT);
  }

  final public void TypeArgument() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      ReferenceType();
      break;
    case HOOK:
      jj_consume_token(HOOK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
      case SUPER:
        WildcardBounds();
        break;
      default:
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void WildcardBounds() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      ReferenceType();
      break;
    case SUPER:
      jj_consume_token(SUPER);
      ReferenceType();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PrimitiveType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ResultType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDENTIFIER:
      Type();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Name() throws ParseException {
        Token t,k;
    t = jj_consume_token(IDENTIFIER);
                          //check the identifier setting true if correct
                                if(t.image.equals("GridSimRandom"))
                                        setGridSimRandom(true);
                                if(t.image.equals("list"))
                                        setlist(true);
                                if(t.image.equals("mList"))
                                        setmList(true);
                                if(t.image.equals("userList"))
                                        setuserList(true);
                                if(t.image.equals("GridSimStandardPE"))
                                        setGridSimStandardPE(true);
                                if((t.image).length()>=7)//verifies which characters make up the string until the seventh element,  because the next characters are variable
                                {
                                        if((t.image.substring(0,7)).equals("gridlet"))
                                                setgridlet(true);
                                }
                                analise(t);
                                if(getPrimitiveValue() && getPrimitiveType())
                                {
                                        setValueVariable(t.image);
                                        setPrimitiveValue(false);
                                        setPrimitiveType(false);
                                }
                                if(getIncrement())
                                        setNameV(t.image);
    label_21:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(DOT);
      k = jj_consume_token(IDENTIFIER);
                                           //check if the word after dot is the correct word and print messages
                                                //if((getGridSimRandom() && getreal())) 
                                                //{
                                                //	System.out.print(".");
                                                //	System.out.print(k.image);
                                                //	System.out.println();
                                                //	System.out.println();
                                                //}
                                                //if(gettoMIs() && getGridSimStandardPE())
                                                //{
                                                        //System.out.print(".");
                                                        //System.out.print(k.image);
                                                //}
                                                if(getmList() | getlist() | getuserList())
                                                {
                                                        if(k.image.equals("add"))
                                                        {
                                                                setadd(true);
                                                                if(getlist())
                                                                {
                                                                        System.out.println("Adicionando tarefa:");
                                                                        setvazio(true);
                                                                }
                                                                if(getuserList())
                                                                {
                                                                        System.out.println("Adicionando usu\u00e1rio:");
                                                                        setvazio(true);
                                                                }
                                                        }
                                                }
                                                if(getGridSimStandardPE())
                                                {
                                                        if(k.image.equals("setRating"))
                                                        {
                                                                setRating(true);
                                                                System.out.println("Atribuindo padr\u00e3o a PE:");
                                                                setvazio(true);//variable used to check if the parameters are empty
                                                        }
                                                        if(k.image.equals("toMIs"))
                                                        {
                                                                settoMIs(true);
                                                                System.out.println("Atribuindo valor a length:");
                                                                setvazio(true);//variable used to check if the parameters are empty
                                                        }
                                                }
                                                if(getGridSimRandom())
                                                {
                                                        if(k.image.equals("real"))
                                                        {
                                                                setreal(true);
                                                                System.out.println("Gerando um atributo rand\u00f4mico:");
                                                                setvazio(true);//variable used to check if the parameters are empty
                                                        }
                                                }
                                                if(getgridlet())
                                                {
                                                        if(k.image.equals("setUserID"))
                                                        {
                                                                setuser(true);
                                                                System.out.println("Setando identificador de tarefa:");
                                                                setvazio(true);//variable used to check if the parameters are empty
                                                        }
                                                }
    }
  }

  final public void NameList() throws ParseException {
    Name();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_22;
      }
      jj_consume_token(COMMA);
      Name();
    }
  }

/*
 * Expression syntax follows.
 */
  final public void Expression() throws ParseException {
    ConditionalExpression();
    if (jj_2_16(2)) {
      AssignmentOperator();
      Expression();
    } else {
      ;
    }
  }

  final public void AssignmentOperator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ConditionalExpression() throws ParseException {
    ConditionalOrExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
      jj_consume_token(HOOK);
      Expression();
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
  }

  final public void ConditionalOrExpression() throws ParseException {
    ConditionalAndExpression();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        break label_23;
      }
      jj_consume_token(SC_OR);
      ConditionalAndExpression();
    }
  }

  final public void ConditionalAndExpression() throws ParseException {
    InclusiveOrExpression();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        break label_24;
      }
      jj_consume_token(SC_AND);
      InclusiveOrExpression();
    }
  }

  final public void InclusiveOrExpression() throws ParseException {
    ExclusiveOrExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        break label_25;
      }
      jj_consume_token(BIT_OR);
      ExclusiveOrExpression();
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {
    AndExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        break label_26;
      }
      jj_consume_token(XOR);
      AndExpression();
    }
  }

  final public void AndExpression() throws ParseException {
    EqualityExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        break label_27;
      }
      jj_consume_token(BIT_AND);
      EqualityExpression();
    }
  }

  final public void EqualityExpression() throws ParseException {
    InstanceOfExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
      case NE:
        ;
        break;
      default:
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
        break;
      case NE:
        jj_consume_token(NE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      InstanceOfExpression();
    }
  }

  final public void InstanceOfExpression() throws ParseException {
    RelationalExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      Type();
      break;
    default:
      ;
    }
  }

  final public void RelationalExpression() throws ParseException {
    ShiftExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
        break;
      case GT:
        jj_consume_token(GT);
        break;
      case LE:
        jj_consume_token(LE);
        break;
      case GE:
        jj_consume_token(GE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      ShiftExpression();
    }
  }

  final public void ShiftExpression() throws ParseException {
    AdditiveExpression();
    label_30:
    while (true) {
      if (jj_2_17(1)) {
        ;
      } else {
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        break;
      default:
        if (jj_2_18(1)) {
          RSIGNEDSHIFT();
        } else if (jj_2_19(1)) {
          RUNSIGNEDSHIFT();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      AdditiveExpression();
    }
  }

  final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_31:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
        Token t;
    UnaryExpression();
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
      case REM:
        ;
        break;
      default:
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t = jj_consume_token(STAR);
        break;
      case SLASH:
        t = jj_consume_token(SLASH);
        break;
      case REM:
        t = jj_consume_token(REM);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                        if(gettoMIs())
                                                        {
                                                                System.out.print(t.image);
                                                                settoMIs(false);
                                                                setast(true);
                                                        }
      UnaryExpression();
    }
  }

  final public void UnaryExpression() throws ParseException {
                setPrimitiveValue(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
      UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PreIncrementExpression() throws ParseException {
    jj_consume_token(INCR);
    PrimaryExpression();
  }

  final public void PreDecrementExpression() throws ParseException {
    jj_consume_token(DECR);
    PrimaryExpression();
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case BANG:
        jj_consume_token(BANG);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
      break;
    default:
      if (jj_2_20(2147483647)) {
        CastExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
          PostfixExpression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_21(2)) {
      jj_consume_token(LPAREN);
      PrimitiveType();
    } else if (jj_2_22(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
          jj_consume_token(TILDE);
          break;
        case BANG:
          jj_consume_token(BANG);
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case THIS:
          jj_consume_token(THIS);
          break;
        case SUPER:
          jj_consume_token(SUPER);
          break;
        case NEW:
          jj_consume_token(NEW);
          break;
        case FALSE:
        case NULL:
        case TRUE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          Literal();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PostfixExpression() throws ParseException {
        Token t;
                setIncrement(true);
    PrimaryExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
    case DECR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCR:
        t = jj_consume_token(INCR);
                        setIncrementUpdate(true);
                        setValueV(t.image);
        break;
      case DECR:
        t = jj_consume_token(DECR);
                        setIncrementUpdate(true);
                        setValueV(t.image);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      ;
    }
                if(getIncrement() && getIncrementUpdate())
                {
                        update_value(getNameV(), getValueV(), "", "");
                        setIncrement(false);
                        setIncrementUpdate(false);
                }
  }

  final public void CastExpression() throws ParseException {
    if (jj_2_23(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(RPAREN);
      UnaryExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpressionNotPlusMinus();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PrimaryExpression() throws ParseException {
    PrimaryPrefix();
    label_33:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_33;
      }
      PrimarySuffix();
    }
  }

  final public void MemberSelector() throws ParseException {
    jj_consume_token(DOT);
    TypeArguments();
    jj_consume_token(IDENTIFIER);
  }

  final public void PrimaryPrefix() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Literal();
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      break;
    case NEW:
      AllocationExpression();
      break;
    default:
      if (jj_2_25(2147483647)) {
        ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Name();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
    if (jj_2_26(2)) {
      jj_consume_token(DOT);
      jj_consume_token(THIS);
    } else if (jj_2_27(2)) {
      jj_consume_token(DOT);
      AllocationExpression();
    } else if (jj_2_28(3)) {
      MemberSelector();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        break;
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(IDENTIFIER);
        break;
      case LPAREN:
        Arguments();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Literal() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                             //check the words and print message
                                analise(t);
                                if(getPrimitiveValue() && getPrimitiveType())
                                {
                                        setValueVariable(t.image);
                                        setPrimitiveValue(false);
                                        setPrimitiveType(false);
                                }
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
                                        analise(t);
                                        if(getPrimitiveValue() && getPrimitiveType())
                                        {
                                                setValueVariable(t.image);
                                                setPrimitiveValue(false);
                                                setPrimitiveType(false);
                                        }
                                        if(getIncrement())
                                        {
                                                setNameV(t.image);
                                        }
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
                                        analise(t);
                                        if(getPrimitiveValue() && getPrimitiveType())
                                        {
                                                setValueVariable(t.image);
                                                setPrimitiveValue(false);
                                                setPrimitiveType(false);
                                        }
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                        analise(t);
                                        if(getPrimitiveValue() && getPrimitiveType())
                                        {
                                                setValueVariable(t.image);
                                                setPrimitiveValue(false);
                                                setPrimitiveType(false);
                                        }
      break;
    case FALSE:
    case TRUE:
      BooleanLiteral();
      break;
    case NULL:
      NullLiteral();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BooleanLiteral() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t = jj_consume_token(TRUE);
                        analise(t);
                        if(getPrimitiveValue() && getPrimitiveType())
                        {
                                setValueVariable(t.image);
                                setPrimitiveValue(false);
                                setPrimitiveType(false);
                        }
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                        analise(t);
                        if(getPrimitiveValue() && getPrimitiveType())
                        {
                                setValueVariable(t.image);
                                setPrimitiveValue(false);
                                setPrimitiveType(false);
                        }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NullLiteral() throws ParseException {
        Token t;
    t = jj_consume_token(NULL);
                        analise(t);
                        if(getPrimitiveValue() && getPrimitiveType())
                        {
                                setValueVariable(t.image);
                                setPrimitiveValue(false);
                                setPrimitiveType(false);
                        }
  }

  final public void Arguments() throws ParseException {
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ArgumentList();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
         //set the boolean variables false after use
                if(getNewInstance())
                        setNewInstance(false);
                if(getExample())
                        setExample(false);
                if(getResourceCharacteristics())
                        setResourceCharacteristics(false);
                if(getGridResource())
                        setGridResource(false);
                if(getGridlet())
                        setGridlet(false);
                if(getNewGridResource())
                        setNewGridResource(false);
                if(getNewPolicy())
                        setNewPolicy(false);
                if(getRandom())
                        setRandom(false);
                if(getmList())
                        setmList(false);
                if(getlist())
                        setlist(false);
                if(getadd())
                        setadd(false);
                if(getMachine())
                        setMachine(false);
                if(getuserList())
                        setuserList(false);
                if(getRating())
                        setRating(false);
                if(getGridSimStandardPE())
                        setGridSimStandardPE(false);
                if(getGridSimRandom())
                        setGridSimRandom(false);
                if(getreal())
                        setreal(false);
                if(getvazio())//print message about empty parameters
                {
                        System.out.println("Passagem de par\u00e2metros sem argumentos");
                        System.out.println();
                }
                else
                        setvazio(false);
                if(getgridlet())
                        setgridlet(false);
                if(getuser())
                        setuser(false);
  }

  final public void ArgumentList() throws ParseException {
    Expression();
    label_34:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_34;
      }
      jj_consume_token(COMMA);
      Expression();
    }
  }

  final public void AllocationExpression() throws ParseException {
    if (jj_2_29(2)) {
      jj_consume_token(NEW);
               setNewInstance(true);
      PrimitiveType();
      ArrayDimsAndInits();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        jj_consume_token(NEW);
               setNewInstance(true);
        ClassOrInterfaceType();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          TypeArguments();
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACKET:
          ArrayDimsAndInits();
          break;
        case LPAREN:
          Arguments();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACE:
            ClassOrInterfaceBody(false);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {
    if (jj_2_32(2)) {
      label_35:
      while (true) {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
        if (jj_2_30(2)) {
          ;
        } else {
          break label_35;
        }
      }
      label_36:
      while (true) {
        if (jj_2_31(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        label_37:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            break label_37;
          }
        }
        ArrayInitializer();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/*
 * Statement syntax follows.
 */
  final public void Statement() throws ParseException {
    if (jj_2_33(2)) {
      LabeledStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
        AssertStatement();
        break;
      case LBRACE:
        Block();
        break;
      case SEMICOLON:
        EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpression();
        jj_consume_token(SEMICOLON);
        break;
      case SWITCH:
        SwitchStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case DO:
        DoStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case BREAK:
        BreakStatement();
        break;
      case CONTINUE:
        ContinueStatement();
        break;
      case RETURN:
        ReturnStatement();
        break;
      case THROW:
        ThrowStatement();
        break;
      case SYNCHRONIZED:
        SynchronizedStatement();
        break;
      case TRY:
        TryStatement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AssertStatement() throws ParseException {
    jj_consume_token(ASSERT);
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void LabeledStatement() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    Statement();
  }

  final public void Block() throws ParseException {
    jj_consume_token(LBRACE);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ;
        break;
      default:
        break label_38;
      }
      BlockStatement();
    }
    jj_consume_token(RBRACE);
  }

  final public void BlockStatement() throws ParseException {
    if (jj_2_34(2147483647)) {
      LocalVariableDeclaration();
      jj_consume_token(SEMICOLON);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        Statement();
        break;
      case CLASS:
      case INTERFACE:
        ClassOrInterfaceDeclaration(0);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      ;
    }
    Type();
    VariableDeclarator();
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_39;
      }
      jj_consume_token(COMMA);
      VariableDeclarator();
    }
  }

  final public void EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  final public void StatementExpression() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      PreIncrementExpression();
      break;
    case DECR:
      PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
                setIncrement(true);
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCR:
          t = jj_consume_token(INCR);
                  setIncrementUpdate(true); setValueV(t.image);
          break;
        case DECR:
          t = jj_consume_token(DECR);
                  setIncrementUpdate(true); setValueV(t.image);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          AssignmentOperator();
          Expression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
                if(getIncrement() && getIncrementUpdate())
                {
                        update_value(getNameV(), getValueV(), "", "");
                        setIncrement(false);
                        setIncrementUpdate(false);
                }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SwitchStatement() throws ParseException {
    jj_consume_token(SWITCH);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        break label_40;
      }
      SwitchLabel();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:
          ;
          break;
        default:
          break label_41;
        }
        BlockStatement();
      }
    }
    jj_consume_token(RBRACE);
  }

  final public void SwitchLabel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      jj_consume_token(CASE);
      Expression();
      jj_consume_token(COLON);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      jj_consume_token(COLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void IfStatement() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      Statement();
      break;
    default:
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Statement();
  }

  final public void DoStatement() throws ParseException {
    jj_consume_token(DO);
    Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
  }

  final public void ForStatement() throws ParseException {
    jj_consume_token(FOR);
                setFor(true);
                System.out.println("In\u00edcio do comando for");
                System.out.println();
                System.out.println();
    jj_consume_token(LPAREN);
    if (jj_2_35(2147483647)) {
      Type();
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      Expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case SEMICOLON:
      case INCR:
      case DECR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForInit();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          Expression();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:
          ForUpdate();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    Statement();
                                System.out.println("Fim do comando for");
                                System.out.println();
                                System.out.println();
  }

  final public void ForInit() throws ParseException {
    if (jj_2_36(2147483647)) {
      LocalVariableDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case INCR:
      case DECR:
        StatementExpressionList();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void StatementExpressionList() throws ParseException {
    StatementExpression();
    label_42:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_42;
      }
      jj_consume_token(COMMA);
      StatementExpression();
    }
  }

  final public void ForUpdate() throws ParseException {
    StatementExpressionList();
  }

  final public void BreakStatement() throws ParseException {
    jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ContinueStatement() throws ParseException {
    jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ReturnStatement() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      Expression();
      break;
    default:
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  final public void ThrowStatement() throws ParseException {
    jj_consume_token(THROW);
    Expression();
    jj_consume_token(SEMICOLON);
  }

  final public void SynchronizedStatement() throws ParseException {
    jj_consume_token(SYNCHRONIZED);
    jj_consume_token(LPAREN);
    Expression();
    jj_consume_token(RPAREN);
    Block();
  }

  final public void TryStatement() throws ParseException {
    jj_consume_token(TRY);
    Block();
    label_43:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        break label_43;
      }
      jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      FormalParameter();
      jj_consume_token(RPAREN);
      Block();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      Block();
      break;
    default:
      ;
    }
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT &&
                    ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public void Annotation() throws ParseException {
    if (jj_2_37(2147483647)) {
      NormalAnnotation();
    } else if (jj_2_38(2147483647)) {
      SingleMemberAnnotation();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        MarkerAnnotation();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void NormalAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      MemberValuePairs();
      break;
    default:
      ;
    }
    jj_consume_token(RPAREN);
  }

  final public void MarkerAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
  }

  final public void SingleMemberAnnotation() throws ParseException {
    jj_consume_token(AT);
    Name();
    jj_consume_token(LPAREN);
    MemberValue();
    jj_consume_token(RPAREN);
  }

  final public void MemberValuePairs() throws ParseException {
    MemberValuePair();
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        break label_44;
      }
      jj_consume_token(COMMA);
      MemberValuePair();
    }
  }

  final public void MemberValuePair() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    MemberValue();
  }

  final public void MemberValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      Annotation();
      break;
    case LBRACE:
      MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ConditionalExpression();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MemberValueArrayInitializer() throws ParseException {
    jj_consume_token(LBRACE);
    MemberValue();
    label_45:
    while (true) {
      if (jj_2_39(2)) {
        ;
      } else {
        break label_45;
      }
      jj_consume_token(COMMA);
      MemberValue();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      ;
    }
    jj_consume_token(RBRACE);
  }

/* Annotation Types. */
  final public void AnnotationTypeDeclaration(int modifiers) throws ParseException {
    jj_consume_token(AT);
    jj_consume_token(INTERFACE);
    jj_consume_token(IDENTIFIER);
    AnnotationTypeBody();
  }

  final public void AnnotationTypeBody() throws ParseException {
    jj_consume_token(LBRACE);
    label_46:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        break label_46;
      }
      AnnotationTypeMemberDeclaration();
    }
    jj_consume_token(RBRACE);
  }

  final public void AnnotationTypeMemberDeclaration() throws ParseException {
        int modifiers;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
    case IDENTIFIER:
    case AT:
      modifiers = Modifiers();
      if (jj_2_40(2147483647)) {
        Type();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case _DEFAULT:
          DefaultValue();
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case INTERFACE:
          ClassOrInterfaceDeclaration(modifiers);
          break;
        case ENUM:
          EnumDeclaration(modifiers);
          break;
        case AT:
          AnnotationTypeDeclaration(modifiers);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case IDENTIFIER:
          FieldDeclaration(modifiers);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DefaultValue() throws ParseException {
    jj_consume_token(_DEFAULT);
    MemberValue();
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_257() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_238() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_223()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_256()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    }
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_3R_217()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_206()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_199()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_216()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_174()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_155()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_198()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_147()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_189()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_173()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_126()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_69()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_39()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_295()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_296()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_82()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_98() {
    return false;
  }

  private boolean jj_3R_71() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_97()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_98()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_277()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_294()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_3R_311()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_3R_177()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_315()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_314()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_3R_310()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) return true;
    }
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    }
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_175()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_150()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_150()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_300() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_3R_300()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_301()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_288()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_3R_69()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_299() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_74()) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    if (jj_3R_250()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_283()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_149()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_114()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_246()) return true;
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) jj_scanpos = xsp;
    if (jj_3R_267()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_277()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_278()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_177()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_246()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_3R_253()) return true;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_203() {
    Token xsp;
    if (jj_3R_208()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_208()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_66()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_214()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_280()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_60()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_267()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_60()) return true;
    if (jj_3R_250()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_251()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_224()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_215()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_112()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_113()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) return true;
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_262()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_263()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_273()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_272()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_3R_170()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_3R_76()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_91()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public JavaParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public JavaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor. */
  public JavaParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JavaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavaParser(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
