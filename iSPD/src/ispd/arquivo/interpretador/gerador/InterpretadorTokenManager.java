/* Generated By:JavaCC: Do not edit this line. InterpretadorTokenManager.java */
package ispd.arquivo.interpretador.gerador;

/** Token Manager. */
public class InterpretadorTokenManager implements InterpretadorConstants
{
private int contaErrosLex = 0;
private String erros = new String("");


public int encontrouErroLex()
{
        return contaErrosLex;
}

public void addErro(String msg)
{
        erros = erros+"\u005cn"+msg;
}

public String getErros()
{
        return erros;
}

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1800800000L) != 0L)
            return 2;
         if ((active0 & 0x1ffeL) != 0L)
         {
            jjmatchedKind = 31;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x1ffeL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 11;
         }
         return -1;
      case 2:
         if ((active0 & 0x1ffeL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 11;
         }
         return -1;
      case 3:
         if ((active0 & 0x1f6eL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 11;
         }
         if ((active0 & 0x90L) != 0L)
            return 11;
         return -1;
      case 4:
         if ((active0 & 0x20L) != 0L)
            return 11;
         if ((active0 & 0x1f4eL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 11;
         }
         return -1;
      case 5:
         if ((active0 & 0x1d0aL) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 11;
         }
         if ((active0 & 0x244L) != 0L)
            return 11;
         return -1;
      case 6:
         if ((active0 & 0x1d02L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 11;
         }
         if ((active0 & 0x8L) != 0L)
            return 11;
         return -1;
      case 7:
         if ((active0 & 0x1500L) != 0L)
            return 11;
         if ((active0 & 0x802L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
            return 11;
         }
         return -1;
      case 8:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
            return 11;
         }
         if ((active0 & 0x2L) != 0L)
            return 11;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 12:
         return jjStartNfaWithStates_0(0, 36, 2);
      case 13:
         return jjStartNfaWithStates_0(0, 35, 2);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 42:
         return jjStartNfaWithStates_0(0, 23, 2);
      case 43:
         return jjStopAtPos(0, 26);
      case 45:
         return jjStopAtPos(0, 25);
      case 47:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x60000000000L);
      case 58:
         return jjStopAtPos(0, 44);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x808L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x1200L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x6L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x90L);
      case 91:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x7fe000L);
      case 93:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         break;
      case 47:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x210L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x418120L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x306004L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x3a6800L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x208L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x1010L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x418160L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 69:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 11);
         return jjMoveStringLiteralDfa4_0(active0, 0x400102L);
      case 75:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 11);
         break;
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa4_0(active0, 0x2040L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x820L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8400L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x100004L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 93:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(3, 14);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(3, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040L);
      case 89:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 5, 11);
         break;
      case 93:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(4, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(4, 17);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(4, 20);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(4, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 67:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 2, 11);
         break;
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L);
      case 77:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 11);
         break;
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 84:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 11);
         break;
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x2L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 93:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(5, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 67:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 3, 11);
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 11);
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 76:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 11);
         break;
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 82:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 71:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(9, 11, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xd0000484fffff8ffL & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(2);
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(0, 4);
                  }
                  break;
               case 11:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xd0000484fffff8ffL & l) == 0L)
                     break;
                  kind = 43;
                  jjCheckNAdd(2);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 44)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  else if ((0x8000000100000000L & l) != 0L)
                  {
                     if (kind > 43)
                        kind = 43;
                     jjCheckNAdd(2);
                  }
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(1);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddTwoStates(0, 1);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x8000000100000000L & l) == 0L)
                     break;
                  kind = 43;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 2:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 43)
                     kind = 43;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x2000000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   4, 5, 6, 8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\123\103\110\105\104\125\114\105\122", "\123\124\101\124\111\103", 
"\104\131\116\101\115\111\103", "\124\101\123\113", "\105\116\124\122\131", "\117\125\124\120\125\124", 
"\124\111\115\105", "\111\116\124\105\122\126\101\114", "\122\101\116\104\117\115", 
"\103\122\105\123\103\105\116\124", "\104\105\103\122\105\101\123\111\116\107", 
"\122\105\123\117\125\122\103\105", "\133\124\103\120\135", "\133\124\103\135", "\133\116\124\123\135", 
"\133\116\124\103\135", "\133\120\103\125\135", "\133\120\120\135", "\133\114\103\135", 
"\133\124\103\124\135", "\133\124\103\115\124\135", "\133\116\124\105\135", "\52", "\57", "\55", 
"\53", "\50", "\51", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, "\72", "\133", "\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "multilinecoment",
   "singlelinecoment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, 1, 2, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7000ffffffffL, 
};
static final long[] jjtoSkip = {
   0xfff00000000L, 
};
static final long[] jjtoSpecial = {
   0x80000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[11];
private final int[] jjstateSet = new int[22];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public InterpretadorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public InterpretadorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 11; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 38)
       {
          jjmatchedKind = 38;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 40)
       {
          jjmatchedKind = 40;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 43 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                addErro("Erro na linha "+input_stream.getEndLine()+". Caracter "+image+" n\u00c3\u00a3o \u00c3\u00a9 aceito.");
                contaErrosLex++;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
