/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelConfiguraCluster.java
 *
 * Created on 03/03/2011, 10:56:58
 */
package ispd.janela.configuracao;

import ispd.janela.Icone;
import ispd.ValidaValores;
import ispd.arquivo.Escalonadores;
import java.util.Arrays;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;

/**
 *
 * @author denison_usuario
 */
public class JPanelConfiguraCluster extends javax.swing.JPanel {

    private Icone icone;
    private ResourceBundle palavras;
    private JComboBox jComboBoxAlgoritmos;
    private Vector<String> nomesDosEscalonadores;
    private Escalonadores escalonadores;

    /** Creates new form JPanelConfiguraCluster */
    public JPanelConfiguraCluster() {
        Locale locale = Locale.getDefault();
        palavras = ResourceBundle.getBundle("ispd.idioma.Idioma", locale);
        this.nomesDosEscalonadores = new Vector<String>(Arrays.asList(Escalonadores.ESCALONADORES));
        jComboBoxAlgoritmos = new JComboBox(nomesDosEscalonadores);
        initComponents();
        jTableComboBox.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(jComboBoxAlgoritmos));
        jTableDouble.getColumnModel().getColumn(0).setPreferredWidth(90);
        jTableComboBox.getColumnModel().getColumn(1).setPreferredWidth(100);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitle = new javax.swing.JLabel();
        jLabelInicial = new javax.swing.JLabel();
        jTableString = new javax.swing.JTable();
        jTableInteiro = new javax.swing.JTable();
        jTableDouble = new javax.swing.JTable();
        jTableComboBox = new javax.swing.JTable();
        jLabel = new javax.swing.JLabel();

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTitle.setText(palavras.getString("Cluster icon configuration")); // NOI18N

        jLabelInicial.setText(palavras.getString("Configuration for the icon") + "#: " + "0");

        jTableString.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Label:", "nome"}
            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableString.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableString.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTableString.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTableString.getTableHeader().setResizingAllowed(false);
        jTableString.getTableHeader().setReorderingAllowed(false);
        jTableString.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableStringPropertyChange(evt);
            }
        });

        jTableInteiro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Nodes:", new Integer(1)}
            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableInteiro.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableInteiro.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTableInteiro.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTableInteiro.getTableHeader().setResizingAllowed(false);
        jTableInteiro.getTableHeader().setReorderingAllowed(false);
        jTableInteiro.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableInteiroPropertyChange(evt);
            }
        });

        jTableDouble.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Processing:", null},
                {"Bandwidth:", null},
                {"Latency:", null}
            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableDouble.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableDouble.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTableDouble.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTableDouble.getTableHeader().setResizingAllowed(false);
        jTableDouble.getTableHeader().setReorderingAllowed(false);
        jTableDouble.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableDoublePropertyChange(evt);
            }
        });

        jTableComboBox.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Scheduler:", null}
            },
            new String [] {
                "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableComboBox.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTableComboBox.setSelectionBackground(new java.awt.Color(255, 255, 255));
        jTableComboBox.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTableComboBox.getTableHeader().setResizingAllowed(false);
        jTableComboBox.getTableHeader().setReorderingAllowed(false);
        jTableComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTableComboBoxPropertyChange(evt);
            }
        });

        jLabel.setText("<html>Mflop/s<br>Mb/s<br>s</html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelInicial)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(jTableComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTableString, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                        .addComponent(jTableInteiro, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                        .addComponent(jTableDouble, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jLabelTitle)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelInicial)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTableString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTableInteiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTableDouble, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTableComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTableStringPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableStringPropertyChange
        // TODO add your handling code here:
        if (jTableString.getValueAt(0, 1) != null && !icone.getNome().equals(jTableString.getValueAt(0, 1).toString())) {
            if (ValidaValores.NomeIconeNaoExiste(jTableString.getValueAt(0, 1).toString()) && ValidaValores.validaNomeIcone(jTableString.getValueAt(0, 1).toString())) {
                ValidaValores.removeNomeIcone(icone.getNome());
                icone.setNome(jTableString.getValueAt(0, 1).toString());
                ValidaValores.addNomeIcone(jTableString.getValueAt(0, 1).toString());
            } else {
                jTableString.setValueAt(icone.getNome(), 0, 1);
            }
        } else {
            setIcone(icone);
        }
    }//GEN-LAST:event_jTableStringPropertyChange

    private void jTableInteiroPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableInteiroPropertyChange
        // TODO add your handling code here:
        if (jTableInteiro.getValueAt(0, 1) != null && ValidaValores.validaInteiro(jTableInteiro.getValueAt(0, 1).toString())) {
            icone.setNumeroEscravos((Integer) jTableInteiro.getValueAt(0, 1));
        } else {
            setIcone(icone);
        }
    }//GEN-LAST:event_jTableInteiroPropertyChange

    private void jTableDoublePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableDoublePropertyChange
        // TODO add your handling code here:
        switch (jTableDouble.getSelectedRow()) {
            case 0:
                if (jTableDouble.getValueAt(0, 1) != null && ValidaValores.validaDouble(jTableDouble.getValueAt(0, 1).toString())) {
                    icone.setPoderComputacional((Double) jTableDouble.getValueAt(0, 1));
                }
                break;
            case 1:
                if (jTableDouble.getValueAt(1, 1) != null && ValidaValores.validaDouble(jTableDouble.getValueAt(1, 1).toString())) {
                    icone.setBanda((Double) jTableDouble.getValueAt(1, 1));
                }
                break;
            case 2:
                if (jTableDouble.getValueAt(2, 1) != null && ValidaValores.validaDouble(jTableDouble.getValueAt(2, 1).toString())) {
                    icone.setLatencia((Double) jTableDouble.getValueAt(2, 1));
                }
                break;
        }
        setIcone(icone);
    }//GEN-LAST:event_jTableDoublePropertyChange

    private void jTableComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTableComboBoxPropertyChange
        // TODO add your handling code here:
        if (icone != null) {
            icone.setAlgoritmo(jComboBoxAlgoritmos.getSelectedItem().toString());
            jTableComboBox.setValueAt(jComboBoxAlgoritmos.getSelectedItem().toString(), 0, 1);
        }
    }//GEN-LAST:event_jTableComboBoxPropertyChange
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel;
    private javax.swing.JLabel jLabelInicial;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JTable jTableComboBox;
    private javax.swing.JTable jTableDouble;
    private javax.swing.JTable jTableInteiro;
    private javax.swing.JTable jTableString;
    // End of variables declaration//GEN-END:variables

    public void setIcone(Icone icone) {
        int numEscal = escalonadores.ESCALONADORES.length + escalonadores.listar().size();
        if (nomesDosEscalonadores.size() > numEscal) {
            for (String nome : nomesDosEscalonadores) {
                if (!escalonadores.listar().contains(nome)) {
                    nomesDosEscalonadores.remove(nome);
                }
            }
        } else if (nomesDosEscalonadores.size() < numEscal) {
            for (String nome : escalonadores.listar()) {
                if (!nomesDosEscalonadores.contains(nome)) {
                    nomesDosEscalonadores.add(nome);
                }
            }
        }
        this.icone = icone;
        this.jLabelInicial.setText(palavras.getString("Configuration for the icon") + "#: " + String.valueOf(icone.getIdGlobal()));
        jTableString.setValueAt(icone.getNome(), 0, 1);
        jTableInteiro.setValueAt(icone.getNumeroEscravos(), 0, 1);
        jTableDouble.setValueAt(icone.getPoderComputacional(), 0, 1);
        jTableDouble.setValueAt(icone.getBanda(), 1, 1);
        jTableDouble.setValueAt(icone.getLatencia(), 2, 1);
        int index = nomesDosEscalonadores.indexOf(icone.getAlgoritmo());
        if (index != -1) {
            jComboBoxAlgoritmos.setSelectedIndex(index);
        } else {
            jComboBoxAlgoritmos.setSelectedIndex(0);
        }
        jTableComboBox.setValueAt(icone.getAlgoritmo(), 0, 1);
    }

    public void setIdioma(ResourceBundle palavras) {
        this.palavras = palavras;
        initTexts();
    }
    
    public void setEscalonadores(Escalonadores escalonadores) {
        this.escalonadores = escalonadores;
    }
    
    private void initTexts() {
        jLabelTitle.setText(palavras.getString("Cluster icon configuration"));
        if (icone == null) {
            jLabelInicial.setText(palavras.getString("Configuration for the icon") + "#: 0");
        } else {
            jLabelInicial.setText(palavras.getString("Configuration for the icon") + "#: " + String.valueOf(icone.getIdGlobal()));
        }
        jTableString.setValueAt(palavras.getString("Label:"), 0, 0);
        jTableInteiro.setValueAt(palavras.getString("Nodes:"), 0, 0);
        jTableDouble.setValueAt(palavras.getString("Processing:"), 0, 0);
        jTableDouble.setValueAt(palavras.getString("Bandwidth:"), 1, 0);
        jTableDouble.setValueAt(palavras.getString("Latency:"), 2, 0);
        jTableComboBox.setValueAt(palavras.getString("Scheduler:"), 0, 0);
    }
}
